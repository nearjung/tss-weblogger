import{a as p}from"./chunk-NKFIGYNG.js";import{c,j as d}from"./chunk-4NFA6V3F.js";import{A as i,X as E,aa as g,o as s,rc as l}from"./chunk-N537WN2U.js";var O={providers:[l({eventCoalescing:!0}),d(p)]},o={API:{HOST:"http://localhost:7001",BASE_URL:"http://localhost:7001/api",HOST_SERVER:"http://localhost:7001",BASE_URL_SERVER:"http://43.228.85.167:7001/api",URL_SOCKET_LOCAL:"ws://localhost:7001/ws",URL_SOCKET_SERVER:"ws://43.228.85.167:7001",ENDPOINTS:{GET_EVENT:"/event/getEvent",ADD_EVENT:"/event/addEvent",UPDATE_EVENT:"/event/updateEvent",DELETE_EVENT:"/event/deleteEvent",END_EVENT:"/event/endEvent",GET_SEASON:"/event/getSeason",ADD_SEASON:"/event/addSeason",UPDATE_SEASON:"/event/updateSeason",DELETE_SEASON:"/event/deleteSeason",GET_RACE:"/event/getRace",ADD_RACE:"/event/addRace",UPDATE_RACE:"/event/updateRace",DELETE_RACE:"/event/deleteRace",GET_LOGGERS:"/logger/get-logger",ADD_LOGGER:"/logger/add-allnew-logger",UPDATE_LOGGER:"/logger/updateLoger",DELETE_LOGGER:"/logger/deleteLoger",GET_USERS:"/users/getUsers",ADD_USER:"/users/addUser",UPDATE_USER:"/users/updateUser",DELETE_USER:"/users/deleteUser",LOGIN:"/auth/login",LOGOUT:"/auth/logout",REFRESH_TOKEN:"/auth/refresh",WEB_SOCKET:"/ws/logger",WEB_SOCKET_BY_CARNUMBER:"/ws/logger-by-carnumber",WEB_LOGGER_STATUS:"/ws/logger-status"}},APP:{NAME:"TSS Race Management",VERSION:"1.0.0",DEFAULT_PAGE_SIZE:10,MAX_FILE_SIZE:50*1024*1024,SUPPORTED_FILE_TYPES:[".txt",".csv"]},UI:{THEME:{PRIMARY_COLOR:"#007bff",SUCCESS_COLOR:"#28a745",WARNING_COLOR:"#ffc107",DANGER_COLOR:"#dc3545"},ANIMATION:{DURATION:300,EASING:"ease-in-out"}}};function u(t){return t.startsWith("/")?t:`/${t}`}function R(){if(typeof window>"u")return o.API.BASE_URL_SERVER;let{hostname:t}=window.location;return t==="localhost"||t==="127.0.0.1"?o.API.BASE_URL:o.API.BASE_URL_SERVER}function a(t){return`${R()}${u(t)}`}var _=class t{constructor(r){this.http=r}loggerList=[];eventList=[];raceList=[];getRace(){let r=a(o.API.ENDPOINTS.GET_RACE);return this.http.get(r).pipe(s(n=>(this.raceList=n.data.map(e=>({IDList:e.id_list,EventID:e.event_id,CategoryName:e.category_name,ClassName:e.class_name,SessionName:e.session_name,StartDate:e.start_date,EndDate:e.end_date})),this.raceList)))}getSeason(){let r=a(o.API.ENDPOINTS.GET_SEASON);return this.http.get(r).pipe(s(n=>(this.eventList=n.data.map(e=>({id:e.season_id,seasonName:e.season_name,creatDate:new Date})),this.eventList)))}getLogger(){let r=a(o.API.ENDPOINTS.GET_LOGGERS);return this.http.get(r).pipe(s(n=>(this.loggerList=n.data.map(e=>({id:e.id,loggerId:e.logger_id,carNumber:e.car_number,firstName:e.first_name,lastName:e.last_name,createdDate:new Date,numberWarning:0,warningDetector:!1})),this.loggerList)))}addAllNewLogger(r){let n=a(o.API.ENDPOINTS.ADD_LOGGER);return this.http.post(n,r).pipe(s(e=>(console.log("Loggers added/updated successfully:",e),e)),i(e=>{throw console.error("Error adding/updating loggers:",e),e}))}updateEditLogger(r){let n=a(o.API.ENDPOINTS.UPDATE_LOGGER);return this.http.post(n,r).pipe(s(e=>(console.log("Loggers added/updated successfully:",e),e)),i(e=>{throw console.error("Error adding/updating loggers:",e),e}))}deleteLogger(r){let n=a(o.API.ENDPOINTS.DELETE_LOGGER);return this.http.post(n,r).pipe(s(e=>(console.log("Loggers Delete successfully:",e),e)),i(e=>{throw console.error("Error Delete loggers:",e),e}))}static \u0275fac=function(n){return new(n||t)(g(c))};static \u0275prov=E({token:t,factory:t.\u0275fac,providedIn:"root"})};export{_ as a};
